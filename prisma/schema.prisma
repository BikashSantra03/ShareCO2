generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String    @unique
  gender             String?
  image              String?
  age                Int?
  phone              String?
  isAdmin            Boolean   @default(false)
  emailVerified      DateTime?
  isProfileCompleted Boolean   @default(false)
  fcmToken           String?   @map("fcm_token")
  disclaimerAccepted Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // User relation
  transactions  Transaction[]
  createdRides  Ride[]         @relation("DriverRides")
  bookedRides   RideBooking[]
  rideRequests  RideRequest[]
  messages      ChatMessage[]
  vehicles      Vehicle[]
  topUpRequests TopUpRequest[]
  Wallet        Wallet?
}

// Add the VerificationToken model for Auth.js
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
model Transaction {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @db.ObjectId
  type              TransactionType
  amount            Float
  description       String
  createdAt         DateTime            @default(now())
  WalletTransaction WalletTransaction[]
}

enum TransactionType {
  debit
  credit
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
model Ride {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  driver                User                @relation("DriverRides", fields: [driverId], references: [id])
  driverId              String              @db.ObjectId
  startingTime          DateTime
  startingLocation      Location?           @relation("RideStartLocation", fields: [startingLocationId], references: [id], onDelete: SetNull)
  startingLocationId    String?             @db.ObjectId
  destinationLocation   Location?           @relation("RideDestination", fields: [destinationLocationId], references: [id], onDelete: SetNull)
  destinationLocationId String?             @db.ObjectId
  status                RideStatus          @default(Pending)
  vehicle               Vehicle?            @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId             String?             @db.ObjectId
  carbonCost            Float               @default(0)
  maxPassengers         Int                 @default(3)
  createdAt             DateTime            @default(now())
  bookings              RideBooking[]
  messages              ChatMessage[]
  WalletTransaction     WalletTransaction[]
}

enum RideStatus {
  Active
  Pending
  Completed
  Cancelled
}

model RideBooking {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  ride              Ride                @relation(fields: [rideId], references: [id])
  rideId            String              @db.ObjectId
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @db.ObjectId
  carbonCost        Float               @default(0)
  status            RideBookingStatus   @default(Confirmed)
  createdAt         DateTime            @default(now())
  WalletTransaction WalletTransaction[]

  @@unique([rideId, userId])
}

enum RideBookingStatus {
  Active
  Confirmed
  CancelledUser
  CancelledDriver
  Completed
  Denied
}

model RideRequest {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                String            @db.ObjectId
  user                  User              @relation(fields: [userId], references: [id])
  startingTime          DateTime
  startingLocation      Location?         @relation("RequestStartLocation", fields: [startingLocationId], references: [id], onDelete: SetNull)
  startingLocationId    String?           @db.ObjectId
  destinationLocation   Location?         @relation("RequestDestLocation", fields: [destinationLocationId], references: [id], onDelete: SetNull)
  destinationLocationId String?           @db.ObjectId
  status                RideRequestStatus @default(Pending)
  fulfilled             Boolean           @default(false)
  createdAt             DateTime          @default(now())

  @@index([userId, createdAt])
}

enum RideRequestStatus {
  Pending
  Accepted
  Rejected
  Cancelled
  Fulfilled
}

model Location {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  name                String        @unique
  distanceFromOrg     Float         @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  ridesStarting       Ride[]        @relation("RideStartLocation")
  ridesDestination    Ride[]        @relation("RideDestination")
  requestsStarting    RideRequest[] @relation("RequestStartLocation")
  requestsDestination RideRequest[] @relation("RequestDestLocation")
}

model Vehicle {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  type          VehicleType
  vehicleNumber String
  model         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  rides Ride[] @relation(fields: [], references: [])

  @@index([userId])
}

enum VehicleType {
  Wheeler2
  Wheeler4
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rideId    String   @db.ObjectId
  ride      Ride     @relation(fields: [rideId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

// Add TopUpRequest model for carbon points top-up requests
model TopUpRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  amount       Int // Amount in INR (keeping as Int since it's currency)
  phoneNumber  String // Phone number for contact
  status       String   @default("Pending") // Pending, Approved, Rejected
  adminComment String? // Optional comment from admin
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
model Wallet {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  spendableBalance Float    @default(0)
  reservedBalance  Float    @default(0)
  version          Int      @default(1)
  updatedAt        DateTime @updatedAt

  transactions WalletTransaction[] @relation("WalletTxns")
}

model WalletTransaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  wallet   Wallet @relation("WalletTxns", fields: [walletId], references: [id])
  walletId String @db.ObjectId

  amount      Float
  direction   WalletTransactionDirection
  purpose     WalletTransactionPurpose
  description String?
  createdAt   DateTime                   @default(now())

  // exactly one reference
  ride          Ride?        @relation(fields: [rideId], references: [id])
  rideId        String?      @db.ObjectId
  rideBook      RideBooking? @relation(fields: [rideBookId], references: [id])
  rideBookId    String?      @db.ObjectId
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.ObjectId

  @@index([walletId])
}

enum WalletTransactionDirection {
  CREDIT // coin into wallet
  DEBIT // coin out of wallet
  NEUTRAL // internal move
}

enum WalletTransactionPurpose {
  TOPUP // User adds funds via external payment
  BOOKING_RESERVE // on ride request (HOLD)
  BOOKING_RELEASE // on ride cancel (UNHOLD)
  BOOKING_SETTLE // on ride complete (DEBIT)
  PAYOUT // on ride complete driver (CREDIT)
  REFUND // for refunds back to user (DEBIT)
  FINE_CHARGE // penalty or fine deducted from user
  PROMOTION // marketing or referral bonuses (DEBIT)
  ADJUSTMENT // admin/system corrections
}
